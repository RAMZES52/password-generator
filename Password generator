import sys
import string
import secrets
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QCheckBox, QLabel, QSpinBox, QTextEdit
)


class PasswordGeneratorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Password Generator')
        self.resize(400, 300)
        main_layout = QVBoxLayout()

        settings_layout = QVBoxLayout()
        self.length_label = QLabel('Длина пароля:')
        settings_layout.addWidget(self.length_label)

        self.length_spinbox = QSpinBox()
        self.length_spinbox.setRange(4, 32)
        settings_layout.addWidget(self.length_spinbox)

        self.include_numbers = QCheckBox('Добавить числа')
        settings_layout.addWidget(self.include_numbers)

        self.include_symbols = QCheckBox('Добавить специальные символы')
        settings_layout.addWidget(self.include_symbols)

        self.include_uppercase = QCheckBox('Добавить заглавные буквы')
        settings_layout.addWidget(self.include_uppercase)

        main_layout.addLayout(settings_layout)

        self.password_display = QTextEdit()
        self.password_display.setReadOnly(True)
        main_layout.addWidget(self.password_display)

        button_layout = QHBoxLayout()
        self.generate_button = QPushButton('Сгенерировать пароль')
        self.generate_button.clicked.connect(self.generate_passwords)
        button_layout.addWidget(self.generate_button)

        self.copy_button = QPushButton('Скопировать в буфер обмена')
        self.copy_button.clicked.connect(self.copy_to_clipboard)
        button_layout.addWidget(self.copy_button)

        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)

    def generate_passwords(self):
        length = self.length_spinbox.value()
        characters = string.ascii_lowercase

        if self.include_uppercase.isChecked():
            characters += string.ascii_uppercase
        if self.include_numbers.isChecked():
            characters += string.digits
        if self.include_symbols.isChecked():
            characters += string.punctuation

        passwords = [self.generate_password(length, characters) for _ in range(5)]
        self.password_display.setPlainText("\n".join(passwords))

    def generate_password(self, length, characters):
        return ''.join(secrets.choice(characters) for _ in range(length))

    def copy_to_clipboard(self):
        clipboard = QApplication.clipboard()
        clipboard.setText(self.password_display.toPlainText())


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = PasswordGeneratorApp()
    window.show()
    sys.exit(app.exec())
